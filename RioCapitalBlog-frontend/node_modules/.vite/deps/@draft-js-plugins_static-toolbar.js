import {
  require_prop_types
} from "./chunk-N5PNNM7H.js";
import {
  BoldButton,
  CodeButton,
  ItalicButton,
  UnderlineButton
} from "./chunk-KHYSWFGY.js";
import {
  require_Draft
} from "./chunk-OSH4YJJZ.js";
import "./chunk-HZ2DQI3P.js";
import "./chunk-G3RJL7CM.js";
import {
  require_react
} from "./chunk-R3JZLLMW.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// ../node_modules/@draft-js-plugins/static-toolbar/lib/index.esm.js
var import_react = __toESM(require_react());

// ../node_modules/@draft-js-plugins/utils/lib/index.esm.js
var import_draft_js = __toESM(require_Draft());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function createStore(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }
  var state = initialState;
  var listeners = {};
  return {
    subscribeToItem: function subscribeToItem(key, callback) {
      listeners[key] = listeners[key] || [];
      listeners[key].push(callback);
    },
    unsubscribeFromItem: function unsubscribeFromItem(key, callback) {
      var listener = listeners[key];
      if (listener) {
        listeners[key] = listener.filter(function(currentListener) {
          return currentListener !== callback;
        });
      }
    },
    updateItem: function updateItem(key, item) {
      var _extends22;
      state = _extends({}, state, (_extends22 = {}, _extends22[key] = item, _extends22));
      var listener = listeners[key];
      if (listener) {
        listener.forEach(function(currentListener) {
          return currentListener(state[key]);
        });
      }
    },
    getItem: function getItem(key) {
      return state[key];
    }
  };
}

// ../node_modules/@draft-js-plugins/static-toolbar/lib/index.esm.js
var import_prop_types = __toESM(require_prop_types());
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
var Toolbar = (function(_React$Component) {
  _inheritsLoose(Toolbar2, _React$Component);
  function Toolbar2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      /**
       * If this is set, the toolbar will render this instead of the regular
       * structure and will also be shown when the editor loses focus.
       * @type {Component}
       */
      overrideContent: void 0
    };
    _this.onOverrideContent = function(overrideContent) {
      return _this.setState({
        overrideContent
      });
    };
    _this.renderDefaultButtons = function(externalProps) {
      return import_react.default.createElement("div", null, import_react.default.createElement(ItalicButton, externalProps), import_react.default.createElement(BoldButton, externalProps), import_react.default.createElement(UnderlineButton, externalProps), import_react.default.createElement(CodeButton, externalProps));
    };
    return _this;
  }
  var _proto = Toolbar2.prototype;
  _proto.render = function render() {
    var _this$props = this.props, theme = _this$props.theme, store = _this$props.store;
    var OverrideContent = this.state.overrideContent;
    var childrenProps = {
      theme: theme.buttonStyles,
      getEditorState: store.getItem("getEditorState"),
      setEditorState: store.getItem("setEditorState"),
      onOverrideContent: this.onOverrideContent
    };
    return import_react.default.createElement("div", {
      className: theme.toolbarStyles.toolbar
    }, OverrideContent ? import_react.default.createElement(OverrideContent, childrenProps) : (this.props.children || this.renderDefaultButtons)(childrenProps));
  };
  return Toolbar2;
})(import_react.default.Component);
Toolbar.propTypes = {
  children: import_prop_types.default.func
};
var separator = "s6m29i4";
function Seperator(_ref) {
  var _ref$className = _ref.className, className = _ref$className === void 0 ? separator : _ref$className;
  return import_react.default.createElement("div", {
    className
  });
}
var buttonStyles = {
  buttonWrapper: "bi09khh",
  button: "bc4rxid",
  active: "akzb7t5"
};
var toolbarStyles = {
  toolbar: "t16lpgj"
};
var defaultTheme = {
  buttonStyles,
  toolbarStyles
};
var index = (function(config) {
  if (config === void 0) {
    config = {};
  }
  var store = createStore();
  var _config = config, _config$theme = _config.theme, theme = _config$theme === void 0 ? defaultTheme : _config$theme;
  var StaticToolbar = function StaticToolbar2(props) {
    return import_react.default.createElement(Toolbar, _extends2({}, props, {
      store,
      theme
    }));
  };
  return {
    initialize: function initialize(_ref) {
      var getEditorState = _ref.getEditorState, setEditorState = _ref.setEditorState;
      store.updateItem("getEditorState", getEditorState);
      store.updateItem("setEditorState", setEditorState);
    },
    // Re-Render the text-toolbar on selection change
    onChange: function onChange(editorState) {
      store.updateItem("selection", editorState.getSelection());
      return editorState;
    },
    Toolbar: StaticToolbar
  };
});
export {
  Seperator as Separator,
  index as default
};
//# sourceMappingURL=@draft-js-plugins_static-toolbar.js.map
