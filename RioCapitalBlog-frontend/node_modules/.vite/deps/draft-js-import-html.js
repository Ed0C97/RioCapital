import {
  BLOCK_TYPE,
  ENTITY_TYPE,
  INLINE_STYLE,
  require_immutable
} from "./chunk-YENES23N.js";
import {
  require_Draft
} from "./chunk-OSH4YJJZ.js";
import "./chunk-HZ2DQI3P.js";
import "./chunk-G3RJL7CM.js";
import "./chunk-R3JZLLMW.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// ../node_modules/draft-js-import-element/esm/lib/replaceTextWithMeta.js
function replaceTextWithMeta(subject, searchText, replaceText) {
  var text = subject.text, characterMeta = subject.characterMeta;
  var searchTextLength = searchText.length;
  var replaceTextLength = replaceText.length;
  var resultTextParts = [];
  var resultCharMeta = characterMeta.slice(0, 0);
  var lastEndIndex = 0;
  var index = text.indexOf(searchText);
  while (index !== -1) {
    resultTextParts.push(text.slice(lastEndIndex, index) + replaceText);
    resultCharMeta = resultCharMeta.concat(
      characterMeta.slice(lastEndIndex, index),
      // Use the metadata of the first char we are replacing.
      repeatSeq(characterMeta.slice(index, index + 1), replaceTextLength)
    );
    lastEndIndex = index + searchTextLength;
    index = text.indexOf(searchText, lastEndIndex);
  }
  resultTextParts.push(text.slice(lastEndIndex));
  resultCharMeta = resultCharMeta.concat(characterMeta.slice(lastEndIndex));
  return {
    text: resultTextParts.join(""),
    characterMeta: resultCharMeta
  };
}
function repeatSeq(seq, count) {
  var result = seq.slice(0, 0);
  while (count-- > 0) {
    result = result.concat(seq);
  }
  return result;
}

// ../node_modules/draft-js-import-element/esm/stateFromElement.js
var import_draft_js = __toESM(require_Draft());
var import_immutable = __toESM(require_immutable());

// ../node_modules/synthetic-dom/esm/SyntheticDOM.js
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof3(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof3(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}
function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var EMPTY_ATTR_LIST = [];
var NODE_TYPE_ELEMENT = 1;
var NODE_TYPE_TEXT = 3;
var NODE_TYPE_FRAGMENT = 11;
var SELF_CLOSING = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
};
var Node = (function() {
  function Node2() {
    _classCallCheck(this, Node2);
    _defineProperty(this, "nodeType", void 0);
    _defineProperty(this, "nodeName", void 0);
    _defineProperty(this, "nodeValue", void 0);
    _defineProperty(this, "childNodes", void 0);
  }
  _createClass(Node2, [{
    key: "toString",
    value: function toString(isXHTML) {
      return isXHTML ? "" : "";
    }
  }]);
  return Node2;
})();
var TextNode = (function(_Node) {
  _inherits(TextNode2, _Node);
  function TextNode2(value) {
    var _this;
    _classCallCheck(this, TextNode2);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextNode2).apply(this, arguments));
    _this.nodeType = NODE_TYPE_TEXT;
    _this.nodeName = "#text";
    _this.nodeValue = value;
    return _this;
  }
  _createClass(TextNode2, [{
    key: "toString",
    value: function toString(isXHTML) {
      return escape(this.nodeValue);
    }
  }]);
  return TextNode2;
})(Node);
var ElementNode = (function(_Node2) {
  _inherits(ElementNode2, _Node2);
  function ElementNode2(name, attributes, childNodes) {
    var _this2;
    _classCallCheck(this, ElementNode2);
    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ElementNode2).apply(this, arguments));
    _defineProperty(_assertThisInitialized(_this2), "_name", void 0);
    _defineProperty(_assertThisInitialized(_this2), "_attrMap", void 0);
    _defineProperty(_assertThisInitialized(_this2), "_isSelfClosing", void 0);
    _defineProperty(_assertThisInitialized(_this2), "childNodes", void 0);
    _defineProperty(_assertThisInitialized(_this2), "attributes", void 0);
    if (attributes == null) {
      attributes = EMPTY_ATTR_LIST;
    }
    var isSelfClosing = SELF_CLOSING[name] === true;
    _this2.nodeType = NODE_TYPE_ELEMENT;
    _this2._name = name.toLowerCase();
    _this2.attributes = attributes;
    _this2._attrMap = new Map(attributes.map(function(attr) {
      return [attr.name, attr];
    }));
    _this2.nodeName = name.toUpperCase();
    _this2.childNodes = [];
    _this2._isSelfClosing = isSelfClosing;
    if (!isSelfClosing && childNodes) {
      childNodes.forEach(_this2.appendChild, _assertThisInitialized(_this2));
    }
    return _this2;
  }
  _createClass(ElementNode2, [{
    key: "appendChild",
    value: function appendChild(node) {
      if (node.nodeType === NODE_TYPE_FRAGMENT && node.childNodes) {
        var _this$childNodes;
        this.childNodes && (_this$childNodes = this.childNodes).push.apply(_this$childNodes, _toConsumableArray(node.childNodes));
      } else {
        this.childNodes && this.childNodes.push(node);
      }
    }
  }, {
    key: "getAttribute",
    value: function getAttribute(name) {
      var attr = this._attrMap.get(name);
      if (attr) {
        return attr.value;
      }
    }
  }, {
    key: "toString",
    value: function toString(isXHTML) {
      var attributes = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = void 0;
      try {
        for (var _iterator = this.attributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _step.value, name = _step$value.name, value = _step$value.value;
          attributes.push(name + (value ? '="' + escapeAttr(value) + '"' : ""));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
      var attrString = attributes.length ? " " + attributes.join(" ") : "";
      if (this._isSelfClosing) {
        return "<" + this._name + attrString + (isXHTML ? "/>" : ">");
      }
      var childNodes = this.childNodes ? this.childNodes.map(function(node) {
        return node.toString(isXHTML);
      }).join("") : "";
      return "<" + this._name + attrString + ">" + childNodes + "</" + this._name + ">";
    }
  }, {
    key: "tagName",
    get: function get() {
      return this.nodeName;
    }
  }, {
    key: "className",
    get: function get() {
      return this.getAttribute("class") || "";
    }
  }]);
  return ElementNode2;
})(Node);
var FragmentNode = (function(_Node3) {
  _inherits(FragmentNode2, _Node3);
  function FragmentNode2(childNodes) {
    var _this3;
    _classCallCheck(this, FragmentNode2);
    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(FragmentNode2).apply(this, arguments));
    _defineProperty(_assertThisInitialized(_this3), "childNodes", void 0);
    _this3.nodeType = NODE_TYPE_FRAGMENT;
    _this3.childNodes = [];
    if (childNodes) {
      childNodes.forEach(_this3.appendChild, _assertThisInitialized(_this3));
    }
    return _this3;
  }
  _createClass(FragmentNode2, [{
    key: "appendChild",
    value: function appendChild(node) {
      if (node.nodeType === NODE_TYPE_FRAGMENT && node.childNodes) {
        var _this$childNodes2;
        this.childNodes && (_this$childNodes2 = this.childNodes).push.apply(_this$childNodes2, _toConsumableArray(node.childNodes));
      } else {
        this.childNodes && this.childNodes.push(node);
      }
    }
  }, {
    key: "toString",
    value: function toString(isXHTML) {
      var childNodes = this.childNodes;
      return childNodes ? childNodes.map(function(node) {
        return node.toString(isXHTML);
      }).join("") : "";
    }
  }]);
  return FragmentNode2;
})(Node);
function escape(html) {
  return html.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function escapeAttr(html) {
  return html.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
}

// ../node_modules/draft-js-import-element/esm/lib/Constants.js
var INLINE_ELEMENTS = {
  a: 1,
  abbr: 1,
  area: 1,
  audio: 1,
  b: 1,
  bdi: 1,
  bdo: 1,
  br: 1,
  button: 1,
  canvas: 1,
  cite: 1,
  code: 1,
  command: 1,
  datalist: 1,
  del: 1,
  dfn: 1,
  em: 1,
  embed: 1,
  i: 1,
  iframe: 1,
  img: 1,
  input: 1,
  ins: 1,
  kbd: 1,
  keygen: 1,
  label: 1,
  map: 1,
  mark: 1,
  meter: 1,
  noscript: 1,
  object: 1,
  output: 1,
  progress: 1,
  q: 1,
  ruby: 1,
  s: 1,
  samp: 1,
  script: 1,
  select: 1,
  small: 1,
  span: 1,
  strong: 1,
  sub: 1,
  sup: 1,
  textarea: 1,
  time: 1,
  u: 1,
  "var": 1,
  video: 1,
  wbr: 1,
  acronym: 1,
  applet: 1,
  basefont: 1,
  big: 1,
  font: 1,
  isindex: 1,
  strike: 1,
  style: 1,
  tt: 1
};
var SPECIAL_ELEMENTS = {
  area: 1,
  base: 1,
  br: 1,
  col: 1,
  colgroup: 1,
  command: 1,
  dl: 1,
  embed: 1,
  head: 1,
  hgroup: 1,
  hr: 1,
  iframe: 1,
  img: 1,
  input: 1,
  keygen: 1,
  link: 1,
  meta: 1,
  ol: 1,
  optgroup: 1,
  option: 1,
  param: 1,
  script: 1,
  select: 1,
  source: 1,
  style: 1,
  table: 1,
  tbody: 1,
  textarea: 1,
  tfoot: 1,
  thead: 1,
  title: 1,
  tr: 1,
  track: 1,
  ul: 1,
  wbr: 1,
  basefont: 1,
  dialog: 1,
  dir: 1,
  isindex: 1
};
var SELF_CLOSING_ELEMENTS = {
  img: 1
};

// ../node_modules/draft-js-import-element/esm/stateFromElement.js
function _typeof2(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof2 = function _typeof3(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof2 = function _typeof3(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof2(obj);
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    keys.push.apply(keys, Object.getOwnPropertySymbols(object));
  }
  if (enumerableOnly) keys = keys.filter(function(sym) {
    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
  });
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(source, true).forEach(function(key) {
        _defineProperty2(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties2(Constructor, staticProps);
  return Constructor;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DATA_URL = /^data:/i;
var NO_STYLE = (0, import_immutable.OrderedSet)();
var NO_ENTITY = null;
var EMPTY_BLOCK = new import_draft_js.ContentBlock({
  key: (0, import_draft_js.genKey)(),
  text: "",
  type: BLOCK_TYPE.UNSTYLED,
  characterList: (0, import_immutable.List)(),
  depth: 0
});
var LINE_BREAKS = /(\r\n|\r|\n)/g;
var SOFT_BREAK_PLACEHOLDER = "\r";
var ZERO_WIDTH_SPACE = "​";
var DATA_ATTRIBUTE = /^data-([a-z0-9-]+)$/;
var ELEM_ATTR_MAP = {
  a: {
    href: "url",
    rel: "rel",
    target: "target",
    title: "title"
  },
  img: {
    src: "src",
    alt: "alt",
    width: "width",
    height: "height"
  }
};
var getEntityData = function getEntityData2(tagName, element) {
  var data = {};
  if (ELEM_ATTR_MAP.hasOwnProperty(tagName)) {
    var attrMap = ELEM_ATTR_MAP[tagName];
    for (var i = 0; i < element.attributes.length; i++) {
      var _element$attributes$i = element.attributes[i], name = _element$attributes$i.name, value = _element$attributes$i.value;
      if (typeof value === "string") {
        var strVal = value;
        if (attrMap.hasOwnProperty(name)) {
          var newName = attrMap[name];
          data[newName] = strVal;
        } else if (DATA_ATTRIBUTE.test(name)) {
          data[name] = strVal;
        }
      }
    }
  }
  return data;
};
var ElementToEntity = {
  a: function a(generator, tagName, element) {
    var data = getEntityData(tagName, element);
    if (isAllowedHref(data.url)) {
      return generator.createEntity(ENTITY_TYPE.LINK, data);
    }
  },
  img: function img(generator, tagName, element) {
    var data = getEntityData(tagName, element);
    if (data.src != null) {
      return generator.createEntity(ENTITY_TYPE.IMAGE, data);
    }
  }
};
var ContentGenerator = (function() {
  function ContentGenerator2() {
    var _this = this;
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _classCallCheck2(this, ContentGenerator2);
    _defineProperty2(this, "contentStateForEntities", void 0);
    _defineProperty2(this, "blockStack", void 0);
    _defineProperty2(this, "blockList", void 0);
    _defineProperty2(this, "depth", void 0);
    _defineProperty2(this, "options", void 0);
    _defineProperty2(this, "inlineCreators", {
      Style: (function(_Style) {
        function Style(_x) {
          return _Style.apply(this, arguments);
        }
        Style.toString = function() {
          return _Style.toString();
        };
        return Style;
      })(function(style) {
        return {
          type: "STYLE",
          style
        };
      }),
      Entity: function Entity(type, data) {
        var mutability = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "MUTABLE";
        return {
          type: "ENTITY",
          entityKey: _this.createEntity(type, toStringMap(data), mutability)
        };
      }
    });
    this.options = options;
    this.contentStateForEntities = import_draft_js.ContentState.createFromBlockArray([]);
    this.blockStack = [];
    this.blockList = [];
    this.depth = 0;
  }
  _createClass2(ContentGenerator2, [{
    key: "process",
    value: function process(element) {
      this.processBlockElement(element);
      var contentBlocks = [];
      this.blockList.forEach(function(block) {
        var _concatFragments = concatFragments(block.textFragments), text = _concatFragments.text, characterMeta = _concatFragments.characterMeta;
        var includeEmptyBlock = false;
        if (text === SOFT_BREAK_PLACEHOLDER) {
          includeEmptyBlock = true;
          text = "";
        }
        if (block.tagName === "pre") {
          var _trimLeadingNewline = trimLeadingNewline(text, characterMeta);
          text = _trimLeadingNewline.text;
          characterMeta = _trimLeadingNewline.characterMeta;
        } else {
          var _collapseWhiteSpace = collapseWhiteSpace(text, characterMeta);
          text = _collapseWhiteSpace.text;
          characterMeta = _collapseWhiteSpace.characterMeta;
        }
        text = text.split(SOFT_BREAK_PLACEHOLDER).join("\n");
        if (text.length || includeEmptyBlock) {
          contentBlocks.push(new import_draft_js.ContentBlock({
            key: (0, import_draft_js.genKey)(),
            text,
            type: block.type,
            characterList: characterMeta.toList(),
            depth: block.depth,
            data: block.data ? (0, import_immutable.Map)(block.data) : (0, import_immutable.Map)()
          }));
        }
      });
      if (!contentBlocks.length) {
        contentBlocks = [EMPTY_BLOCK];
      }
      return import_draft_js.ContentState.createFromBlockArray(contentBlocks, this.contentStateForEntities.getEntityMap());
    }
  }, {
    key: "getBlockTypeFromTagName",
    value: function getBlockTypeFromTagName(tagName) {
      var blockTypes = this.options.blockTypes;
      if (blockTypes && blockTypes[tagName]) {
        return blockTypes[tagName];
      }
      switch (tagName) {
        case "li": {
          var parent = this.blockStack.slice(-1)[0];
          return parent.tagName === "ol" ? BLOCK_TYPE.ORDERED_LIST_ITEM : BLOCK_TYPE.UNORDERED_LIST_ITEM;
        }
        case "blockquote": {
          return BLOCK_TYPE.BLOCKQUOTE;
        }
        case "h1": {
          return BLOCK_TYPE.HEADER_ONE;
        }
        case "h2": {
          return BLOCK_TYPE.HEADER_TWO;
        }
        case "h3": {
          return BLOCK_TYPE.HEADER_THREE;
        }
        case "h4": {
          return BLOCK_TYPE.HEADER_FOUR;
        }
        case "h5": {
          return BLOCK_TYPE.HEADER_FIVE;
        }
        case "h6": {
          return BLOCK_TYPE.HEADER_SIX;
        }
        case "pre": {
          return BLOCK_TYPE.CODE;
        }
        case "figure": {
          return BLOCK_TYPE.ATOMIC;
        }
        default: {
          return BLOCK_TYPE.UNSTYLED;
        }
      }
    }
  }, {
    key: "processBlockElement",
    value: function processBlockElement(element) {
      if (!element) {
        return;
      }
      var customBlockFn = this.options.customBlockFn;
      var tagName = element.nodeName.toLowerCase();
      var type;
      var data;
      if (customBlockFn) {
        var customBlock = customBlockFn(element);
        if (customBlock != null) {
          type = customBlock.type;
          data = customBlock.data;
        }
      }
      var isCustomType = true;
      if (type == null) {
        isCustomType = false;
        type = this.getBlockTypeFromTagName(tagName);
      }
      if (type === BLOCK_TYPE.CODE) {
        var language = element.getAttribute("data-language");
        if (language) {
          data = _objectSpread({}, data, {
            language
          });
        }
      }
      var hasDepth = canHaveDepth(type);
      var allowRender = !SPECIAL_ELEMENTS.hasOwnProperty(tagName);
      if (!isCustomType && !hasSemanticMeaning(type)) {
        var parent = this.blockStack.slice(-1)[0];
        if (parent) {
          type = parent.type;
        }
      }
      var block = {
        tagName,
        textFragments: [],
        type,
        styleStack: [NO_STYLE],
        entityStack: [NO_ENTITY],
        depth: hasDepth ? this.depth : 0,
        data
      };
      if (allowRender) {
        this.blockList.push(block);
        if (hasDepth) {
          this.depth += 1;
        }
      }
      this.blockStack.push(block);
      if (element.childNodes != null) {
        Array.from(element.childNodes).forEach(this.processNode, this);
      }
      this.blockStack.pop();
      if (allowRender && hasDepth) {
        this.depth -= 1;
      }
    }
  }, {
    key: "processInlineElement",
    value: function processInlineElement(element) {
      var tagName = element.nodeName.toLowerCase();
      if (tagName === "br") {
        this.processText(SOFT_BREAK_PLACEHOLDER);
        return;
      }
      var block = this.blockStack.slice(-1)[0];
      var style = block.styleStack.slice(-1)[0];
      var entityKey = block.entityStack.slice(-1)[0];
      var customInlineFn = this.options.customInlineFn;
      var customInline = customInlineFn ? customInlineFn(element, this.inlineCreators) : null;
      if (customInline != null) {
        switch (customInline.type) {
          case "STYLE": {
            style = style.add(customInline.style);
            break;
          }
          case "ENTITY": {
            entityKey = customInline.entityKey;
            break;
          }
        }
      } else {
        style = addStyleFromTagName(style, tagName, this.options.elementStyles);
        if (ElementToEntity.hasOwnProperty(tagName)) {
          entityKey = ElementToEntity[tagName](this, tagName, element) || entityKey;
        }
      }
      block.styleStack.push(style);
      block.entityStack.push(entityKey);
      if (element.childNodes != null) {
        Array.from(element.childNodes).forEach(this.processNode, this);
      }
      if (SELF_CLOSING_ELEMENTS.hasOwnProperty(tagName)) {
        this.processText(" ");
      }
      block.entityStack.pop();
      block.styleStack.pop();
    }
  }, {
    key: "processTextNode",
    value: function processTextNode(node) {
      var text = node.nodeValue;
      text = text.replace(LINE_BREAKS, "\n");
      text = text.split(ZERO_WIDTH_SPACE).join(SOFT_BREAK_PLACEHOLDER);
      this.processText(text);
    }
  }, {
    key: "processText",
    value: function processText(text) {
      var block = this.blockStack.slice(-1)[0];
      var style = block.styleStack.slice(-1)[0];
      var entity = block.entityStack.slice(-1)[0];
      var charMetadata = import_draft_js.CharacterMetadata.create({
        style,
        entity
      });
      var seq = (0, import_immutable.Repeat)(charMetadata, text.length);
      block.textFragments.push({
        text,
        characterMeta: seq
      });
    }
  }, {
    key: "processNode",
    value: function processNode(node) {
      if (node.nodeType === NODE_TYPE_ELEMENT) {
        var _element = node;
        var _tagName = _element.nodeName.toLowerCase();
        if (INLINE_ELEMENTS.hasOwnProperty(_tagName)) {
          this.processInlineElement(_element);
        } else {
          this.processBlockElement(_element);
        }
      } else if (node.nodeType === NODE_TYPE_TEXT) {
        this.processTextNode(node);
      }
    }
  }, {
    key: "createEntity",
    value: function createEntity(type, data) {
      var mutability = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "MUTABLE";
      this.contentStateForEntities = this.contentStateForEntities.createEntity(type, mutability, data);
      return this.contentStateForEntities.getLastCreatedEntityKey();
    }
  }]);
  return ContentGenerator2;
})();
function trimLeadingNewline(text, characterMeta) {
  if (text.charAt(0) === "\n") {
    text = text.slice(1);
    characterMeta = characterMeta.slice(1);
  }
  return {
    text,
    characterMeta
  };
}
function trimLeadingSpace(text, characterMeta) {
  while (text.charAt(0) === " ") {
    text = text.slice(1);
    characterMeta = characterMeta.slice(1);
  }
  return {
    text,
    characterMeta
  };
}
function trimTrailingSpace(text, characterMeta) {
  while (text.slice(-1) === " ") {
    text = text.slice(0, -1);
    characterMeta = characterMeta.slice(0, -1);
  }
  return {
    text,
    characterMeta
  };
}
function collapseWhiteSpace(text, characterMeta) {
  text = text.replace(/[ \t\n]/g, " ");
  var _trimLeadingSpace = trimLeadingSpace(text, characterMeta);
  text = _trimLeadingSpace.text;
  characterMeta = _trimLeadingSpace.characterMeta;
  var _trimTrailingSpace = trimTrailingSpace(text, characterMeta);
  text = _trimTrailingSpace.text;
  characterMeta = _trimTrailingSpace.characterMeta;
  var i = text.length;
  while (i--) {
    if (text.charAt(i) === " " && text.charAt(i - 1) === " ") {
      text = text.slice(0, i) + text.slice(i + 1);
      characterMeta = characterMeta.slice(0, i).concat(characterMeta.slice(i + 1));
    }
  }
  var _replaceTextWithMeta = replaceTextWithMeta({
    text,
    characterMeta
  }, SOFT_BREAK_PLACEHOLDER + " ", SOFT_BREAK_PLACEHOLDER);
  text = _replaceTextWithMeta.text;
  characterMeta = _replaceTextWithMeta.characterMeta;
  var _replaceTextWithMeta2 = replaceTextWithMeta({
    text,
    characterMeta
  }, " " + SOFT_BREAK_PLACEHOLDER, SOFT_BREAK_PLACEHOLDER);
  text = _replaceTextWithMeta2.text;
  characterMeta = _replaceTextWithMeta2.characterMeta;
  return {
    text,
    characterMeta
  };
}
function canHaveDepth(blockType) {
  switch (blockType) {
    case BLOCK_TYPE.UNORDERED_LIST_ITEM:
    case BLOCK_TYPE.ORDERED_LIST_ITEM: {
      return true;
    }
    default: {
      return false;
    }
  }
}
function concatFragments(fragments) {
  var text = "";
  var characterMeta = (0, import_immutable.Seq)();
  fragments.forEach(function(textFragment) {
    text = text + textFragment.text;
    characterMeta = characterMeta.concat(textFragment.characterMeta);
  });
  return {
    text,
    characterMeta
  };
}
function addStyleFromTagName(styleSet, tagName, elementStyles) {
  switch (tagName) {
    case "b":
    case "strong": {
      return styleSet.add(INLINE_STYLE.BOLD);
    }
    case "i":
    case "em": {
      return styleSet.add(INLINE_STYLE.ITALIC);
    }
    case "u":
    case "ins": {
      return styleSet.add(INLINE_STYLE.UNDERLINE);
    }
    case "code": {
      return styleSet.add(INLINE_STYLE.CODE);
    }
    case "s":
    case "del": {
      return styleSet.add(INLINE_STYLE.STRIKETHROUGH);
    }
    default: {
      if (elementStyles && elementStyles[tagName]) {
        return styleSet.add(elementStyles[tagName]);
      }
      return styleSet;
    }
  }
}
function hasSemanticMeaning(blockType) {
  return blockType !== BLOCK_TYPE.UNSTYLED;
}
function toStringMap(input) {
  var result = {};
  if (input !== null && _typeof2(input) === "object" && !Array.isArray(input)) {
    var obj = input;
    for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {
      var _key = _Object$keys[_i];
      var value = obj[_key];
      if (typeof value === "string") {
        result[_key] = value;
      }
    }
  }
  return result;
}
function isAllowedHref(input) {
  if (input == null || input.match(DATA_URL)) {
    return false;
  } else {
    return true;
  }
}
function stateFromElement(element, options) {
  return new ContentGenerator(options).process(element);
}

// ../node_modules/draft-js-import-html/esm/parseHTML.js
function parseHTML(html) {
  var doc;
  if (typeof DOMParser !== "undefined") {
    var parser = new DOMParser();
    doc = parser.parseFromString(html, "text/html");
  } else {
    doc = document.implementation.createHTMLDocument("");
    if (doc.documentElement) {
      doc.documentElement.innerHTML = html;
    }
  }
  return doc.body || doc.createElement("body");
}

// ../node_modules/draft-js-import-html/esm/stateFromHTML.js
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var defaultOptions = {};
function stateFromHTML(html, options) {
  var _ref = options || defaultOptions, parser = _ref.parser, otherOptions = _objectWithoutProperties(_ref, ["parser"]);
  if (parser == null) {
    parser = parseHTML;
  }
  var element = parser(html);
  return stateFromElement(element, otherOptions);
}
export {
  stateFromHTML
};
//# sourceMappingURL=draft-js-import-html.js.map
